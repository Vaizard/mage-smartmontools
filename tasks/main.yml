---

- name: "Override vars/main.yml if needed"
  include_vars: "vars_{{ ansible_distribution }}.yml"
  when: ansible_distribution == 'Fedora'

- name: Install smartmontools
  package:
    name: smartmontools
    state: latest

- name: Get all disks smartmontools support
  shell: |
    if [[ `smartctl --scan -d ata  | cut -c -1` != "#" ]] ; then smartctl --scan -d ata  | awk '{print $1}' ; fi
    if [[ `smartctl --scan -d scsi | cut -c -1` != "#" ]] ; then smartctl --scan -d scsi | awk '{print $1}' ; fi
    if [[ `smartctl --scan -d sat  | cut -c -1` != "#" ]] ; then smartctl --scan -d sat  | awk '{print $1}' ; fi
    if [[ `smartctl --scan -d nvme | cut -c -1` != "#" ]] ; then smartctl --scan -d nvme | awk '{print $1}' ; fi
  args:
    executable: /bin/bash
  register: disks
  changed_when: false
  failed_when: false

# NOTE that some storage devices are seen by smartctl under more then one driver. Usually the overlap is
# on sat/scsi, so `smartctl --scan -d sat` and `smartctl --scan -d scsi` can both return /dev/sda.
# From here on, we use the `unique` filter to weed out these duplicates.
- name: Check if disks support SMART
  shell: "smartctl -s on {{ item }} ; smartctl -i {{ item }} | grep 'SMART support is' | grep -qcE 'Disabled|Unavailable'"
  args:
    executable: /bin/bash
  with_items: "{{ disks.stdout_lines | unique }}"
  register: smart_disabled
  ignore_errors: True
  changed_when: false

- name: List of disks smartctl can see
  debug: msg="{{ item }}"
  with_flattened: "{{ disks.stdout_lines | unique }}"

- name: SMART status of each of the disks
  debug: msg="{{ item.item }} SMART status {{ item.rc | replace("1", "[PASS]") | replace("0", "[FAIL]") }}"
  with_flattened: "{{ smart_disabled.results }}"

- name: Ensure smartd configuration is in place (smart enabled devices present)
  template:
    src: smartd.conf.j2
    dest: "{{ smartd_config_path }}"
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify: restart smartd
  when: smart_disabled is failed

- name: Ensure smartd configuration is in place (no smart enabled devices present)
  template:
    src: smartd.dist.j2
    dest: "{{ smartd_config_path }}"
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify: restart smartd
  when: smart_disabled is success

- name: Ensure default file is configured (start_smartd)
  lineinfile: >
    dest=/etc/default/smartmontools
    regexp="^start_smartd="
    line="start_smartd=yes"
  notify: restart smartd
  when: smart_disabled is failed

- name: Ensure default file is configured (smartd_opts)
  lineinfile: >
    dest=/etc/default/smartmontools
    regexp="^smartd_opts="
    line='smartd_opts="--interval=1800"'
  notify: restart smartd
  when: smart_disabled is failed

- name: enable smartd service
  service: name=smartd enabled=yes
  when: smart_disabled is failed
